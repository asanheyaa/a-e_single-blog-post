const burgerMenu = document.querySelector(".burger"), menu = document.querySelector(".header__menu-wrapper"), header = document.querySelector(".header"); function burgerFunction(e) { burgerMenu.classList.toggle("_active"), menu.classList.toggle("_active"), header.classList.toggle("_active"), document.body.classList.toggle("_lock") } function selectMenu() { let e = document.querySelectorAll("[data-select-menu]"); if (e) { function t(e) { let t = e.target.closest("[data-select-menu]"), r = t.querySelector("[data-select-menu-drop-down]"); t.classList.toggle("_active"), i(r, 300) } function r(e) { let t = e.target.closest("[data-select-menu]"), r = t.querySelector("[data-select-menu-value]"), a = t.querySelector("[data-select-menu-drop-down]"), i = this.innerText; r.innerHTML = i, t.classList.remove("_active"), s(a, 300) } document.documentElement.addEventListener("click", function t(r) { let a = r.target.closest("[data-select-menu]"); e.forEach(e => { if (!a || a !== e) { e.classList.remove("_active"); let t = e.querySelector("[data-select-menu-drop-down]"); s(t, 300) } }) }), e.forEach(e => { let s = e.querySelector("[data-select-menu-button]"), a = e.querySelectorAll("[data-select-menu-option]"); s.addEventListener("click", t), a.forEach(e => { e.addEventListener("click", r) }) }); let s = (e, t = 500) => { e.classList.contains("_slide") || (e.classList.add("_slide"), e.style.transitionProperty = "height, margin, padding", e.style.transitionDuration = t + "ms", e.style.height = e.offsetHeight + "px", e.offsetHeight, e.style.overflow = "hidden", e.style.height = 0, e.style.paddingTop = 0, e.style.paddingBottom = 0, e.style.marginTop = 0, e.style.marginBottom = 0, window.setTimeout(() => { e.style.display = "none", e.style.removeProperty("height"), e.style.removeProperty("padding-top"), e.style.removeProperty("padding-bottom"), e.style.removeProperty("margin-top"), e.style.removeProperty("margin-bottom"), e.style.removeProperty("overflow"), e.style.removeProperty("transition-duration"), e.style.removeProperty("transition-property"), e.classList.remove("_slide") }, t)) }, a = (e, t = 500) => { if (!e.classList.contains("_slide")) { e.classList.add("_slide"), e.style.removeProperty("display"); let r = window.getComputedStyle(e).display; "none" === r && (r = "block"), e.style.display = r; let s = e.offsetHeight; e.style.overflow = "hidden", e.style.height = 0, e.style.paddingTop = 0, e.style.paddingBottom = 0, e.style.marginTop = 0, e.style.marginBottom = 0, e.offsetHeight, e.style.transitionProperty = "height, margin, padding", e.style.transitionDuration = t + "ms", e.style.height = s + "px", e.style.removeProperty("padding-top"), e.style.removeProperty("padding-bottom"), e.style.removeProperty("margin-top"), e.style.removeProperty("margin-bottom"), window.setTimeout(() => { e.style.removeProperty("height"), e.style.removeProperty("overflow"), e.style.removeProperty("transition-duration"), e.style.removeProperty("transition-property"), e.classList.remove("_slide") }, t) } }, i = (e, t = 500) => { if ("none" === window.getComputedStyle(e).display) return a(e, t); s(e, t) } } } function dynamicAdaptiv() { new class e { constructor(e) { this.type = e } init() { this.оbjects = [], this.daClassname = "_dynamic_adapt_", this.nodes = [...document.querySelectorAll("[data-da]")], this.nodes.forEach(e => { let t = e.dataset.da.trim(), r = t.split(","), s = {}; s.element = e, s.parent = e.parentNode, s.destination = document.querySelector(`${r[0].trim()}`), s.breakpoint = r[1] ? r[1].trim() : "767", s.place = r[2] ? r[2].trim() : "last", s.index = this.indexInParent(s.parent, s.element), this.оbjects.push(s) }), this.arraySort(this.оbjects), this.mediaQueries = this.оbjects.map(({ breakpoint: e }) => `(${this.type}-width: ${e}px),${e}`).filter((e, t, r) => r.indexOf(e) === t), this.mediaQueries.forEach(e => { let t = e.split(","), r = window.matchMedia(t[0]), s = t[1], a = this.оbjects.filter(({ breakpoint: e }) => e === s); r.addEventListener("change", () => { this.mediaHandler(r, a) }), this.mediaHandler(r, a) }) } mediaHandler(e, t) { e.matches ? t.forEach(e => { this.moveTo(e.place, e.element, e.destination) }) : t.forEach(({ parent: e, element: t, index: r }) => { t.classList.contains(this.daClassname) && this.moveBack(e, t, r) }) } moveTo(e, t, r) { if (t.classList.add(this.daClassname), "last" === e || e >= r.children.length) { r.append(t); return } if ("first" === e) { r.prepend(t); return } r.children[e].before(t) } moveBack(e, t, r) { t.classList.remove(this.daClassname), void 0 !== e.children[r] ? e.children[r].before(t) : e.append(t) } indexInParent(e, t) { return [...e.children].indexOf(t) } arraySort(e) { if ("min" === this.type) e.sort((e, t) => e.breakpoint === t.breakpoint ? e.place === t.place ? 0 : "first" === e.place || "last" === t.place ? -1 : "last" === e.place || "first" === t.place ? 1 : 0 : e.breakpoint - t.breakpoint); else { e.sort((e, t) => e.breakpoint === t.breakpoint ? e.place === t.place ? 0 : "first" === e.place || "last" === t.place ? 1 : "last" === e.place || "first" === t.place ? -1 : 0 : t.breakpoint - e.breakpoint); return } } }("max").init() } function filterFunction() { let e = document.querySelectorAll("[data-filter]"); e && e.forEach(e => { let t = e.querySelectorAll("[data-filter-category]"), r = e.querySelectorAll("[data-filter-content]"); t.forEach(e => { e.addEventListener("click", e => { r.forEach(e => { e.classList.contains("_show") && e.classList.remove("_show") }), t.forEach(e => { e.classList.contains("_active") && e.classList.remove("_active") }); let s = e.target, a = s.dataset.filterCategory; if ("all" === a) r.forEach(e => { e.classList.add("_show") }); else { let i = document.querySelectorAll(`[data-filter-content="${a}"]`); i.forEach(e => { e.classList.add("_show") }) } s.classList.add("_active") }) }) }) } burgerMenu.addEventListener("click", burgerFunction), selectMenu(), dynamicAdaptiv(), filterFunction();